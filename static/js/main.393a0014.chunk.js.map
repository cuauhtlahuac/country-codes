{"version":3,"sources":["index.js"],"names":["http","require","getCountryName","code","a","searchCountry","getCountries","countries","i","total_pages","getCountry","resolve","console","warn","country","main","countryResult","RederData","useState","color","setColor","name","setName","load","setLoad","setCode","setCountry","fail","setFail","getName","toUpperCase","useEffect","styles","backgroundColor","height","display","justifyContent","alignItems","flexDirection","fontFamily","textAlign","style","src","alt","Fragment","alpha2Code","language","capital","Intl","NumberFormat","format","population","region","borders","map","e","key","fontWidth","type","placeholder","pattern","inputMode","maxLength","marginBottom","width","padding","onChange","target","value","onClick","page","Promise","fetchCountries","reject","get","res","error","statusCode","contentType","headers","Error","test","setEncoding","rawData","on","chunk","parsedData","JSON","parse","message","index","data","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.393a0014.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\n// const https = require('https');\nconst http = require('http');\n\nasync function getCountryName(code) {\n\tconst searchCountry = async function() {\n\t\tconst countries = await getCountries();\n\n\t\tfor (let i = 1; i <= countries.total_pages; i++) {\n\t\t\ttry {\n\t\t\t\tconst resolve = await getCountry(code, i);\n\t\t\t\treturn resolve;\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn(error);\n\t\t\t}\n\t\t}\n\t};\n\tconst country = await searchCountry();\n\treturn country;\n}\n\nasync function main(code) {\n\tconst countryResult = await getCountryName(code);\n\treturn countryResult;\n}\n\nfunction RederData() {\n\tconst [ color, setColor ] = useState(false);\n\tconst [ name, setName ] = useState('Waiting for country');\n\tconst [ load, setLoad ] = useState(false);\n\tconst [ code, setCode ] = useState('mx');\n\tconst [ country, setCountry ] = useState({});\n\tconst [ fail, setFail ] = useState(false);\n\n\tasync function getName(code) {\n\t\tsetLoad(true);\n\t\tconst country = await main(code.toUpperCase());\n\t\tif (country) {\n\t\t\tsetCountry(country);\n\t\t\tsetName(country.name);\n\t\t\tname ? setColor(true) : setColor(false);\n\t\t\tsetLoad(false);\n\t\t\tsetFail(false);\n\t\t} else {\n\t\t\tsetLoad(false);\n\t\t\tsetFail(true);\n\t\t}\n\t}\n    \n\tuseEffect(\n        () => {\n            getName(code);\n\t\t\treturn () => {};\n\t\t},\n\t\t[]\n\t);\n\n\tlet styles = {\n\t\tbackgroundColor: !color ? 'aliceblue' : 'cornflowerblue',\n\t\theight: '100vh',\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t\tflexDirection: 'column',\n        fontFamily: 'arial',\n        textAlign: \"center\"\n\t};\n\n\treturn (\n\t\t<div style={styles}>\n\t\t\t<h1>Country</h1>\n\t\t\t{load && <img src={'https://clipartart.com/images/loading-gif-split-into-cliparts.gif'} alt='loading'/>}\n\t\t\t{!load &&\n\t\t\t!fail && (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<h2>{name}</h2>\n\t\t\t\t\t<h3>{`Country Code: ${country.alpha2Code}`}</h3>\n\t\t\t\t\t<h3>{`Lenguaje: ${country.language}`}</h3>\n\t\t\t\t\t<h3>{`Capital: ${country.capital}`}</h3>\n\t\t\t\t\t<h3>{`Population: ${new Intl.NumberFormat('es-MX').format(country.population)}`}</h3>\n\t\t\t\t\t<h3>{`Region: ${country.region}`}</h3>\n\t\t\t\t\t<div style={{ display: 'flex', alignItems: 'center' }}>\n\t\t\t\t\t\t<h3>Borders: </h3>\n\t\t\t\t\t\t<ul style={{ display: 'flex', flexDirection: 'column' }}>\n\t\t\t\t\t\t\t{country &&\n\t\t\t\t\t\t\t\tcountry.borders &&\n\t\t\t\t\t\t\t\tcountry.borders.map((e, i) => <li key={`border ${i} ${e}`}>{e}</li>)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p style={{ color: '#ddd', fontWidth: 'bold' }}>Write a new country code</p>\n\t\t\t\t</React.Fragment>\n\t\t\t)}\n\t\t\t{fail && <p>Country not found try again</p>}\n\t\t\t{!load && (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"AZ\"\n\t\t\t\t\t\tpattern={/[A-Za-z]{2}/}\n\t\t\t\t\t\tinputMode=\"text\"\n\t\t\t\t\t\tmaxLength={2}\n\t\t\t\t\t\tstyle={{ marginBottom: 10, width: 20, padding: 5 }}\n\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\tsetCode(e.target.value);\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<button onClick={() => getName(code)}>Search</button>\n\t\t\t\t</React.Fragment>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nReactDOM.render(<RederData />, document.getElementById('root'));\n\nfunction getCountries(page = 1) {\n\treturn new Promise(fetchCountries);\n\n\tfunction fetchCountries(resolve, reject) {\n\t\thttp\n\t\t\t.get(`https://jsonmock.hackerrank.com/api/countries?page=${page}`, (res) => {\n\t\t\t\tconst statusCode = res.statusCode;\n\t\t\t\tconst contentType = res.headers['content-type'];\n\n\t\t\t\tlet error;\n\t\t\t\tif (statusCode !== 200) {\n\t\t\t\t\terror = new Error(`Request Failed.\\nStatus Code: ${statusCode}`);\n\t\t\t\t} else if (!/^application\\/json/.test(contentType)) {\n\t\t\t\t\terror = new Error(`Invalid content-type.\\nExpected application/json but received ${contentType}`);\n\t\t\t\t}\n\t\t\t\tif (error) {\n\t\t\t\t\treturn reject(error);\n\t\t\t\t}\n\n\t\t\t\tres.setEncoding('utf8');\n\t\t\t\tlet rawData = '';\n\t\t\t\tres.on('data', (chunk) => (rawData += chunk));\n\t\t\t\tres.on('end', () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst parsedData = JSON.parse(rawData);\n\t\t\t\t\t\treturn resolve(parsedData);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treject(e.message);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t})\n\t\t\t.on('error', (e) => {\n\t\t\t\treturn `Got error: ${e.message}`;\n\t\t\t});\n\t}\n}\n\nasync function getCountry(code, index) {\n\tconst countries = await getCountries(index);\n\n\treturn new Promise((resolve, reject) => {\n\t\tconst country = countries.data.find((country) => country.alpha2Code === code);\n\t\tif (country) {\n\t\t\tresolve(country);\n\t\t} else {\n\t\t\treject(`code ${code} in page ${index} not found`);\n\t\t}\n\t});\n}\n"],"sourceRoot":""}